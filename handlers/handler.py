from aiogram import Router
from aiogram.types import Message
from aiogram.filters.command import Command
from database.requests import init_db, add_task, get_tasks, update_task_status, delete_task

handlers_router = Router()


init_db()


@handlers_router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç! –¶–µ TODO APP –±–æ—Ç üî•, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å–≤—ñ–π –¥–µ–Ω—å üíº —Ç–∞ –≤–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –∑–∞–¥–∞—á—ñüöÄ!")


@handlers_router.message(Command("create"))
async def create(message: Message):
    task_data = message.text[8:].strip()

    if ':' not in task_data:
        await message.answer("–§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ: –û–ø–∏—Å –∑–∞–¥–∞—á—ñ.")
        return

    task_title, task_description = task_data.split(':', 1)
    task_title = task_title.strip()
    task_description = task_description.strip()


    add_task(task_title, task_description)

    await message.answer(f"–ó–∞–¥–∞—á–∞ –¥–æ–¥–∞–Ω–∞: {task_title} - {task_description}")


@handlers_router.message(Command("show"))
async def show(message: Message):
    tasks = get_tasks()

    if not tasks:
        await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–¥–∞—á‚òîÔ∏è! –î–æ–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /create.')
        return

    response = "–í–∞—à—ñ –∑–∞–¥–∞—á—ñ:\n"
    for task in tasks:
        response += f"{task[0]} - {task[1]} (–°—Ç–∞—Ç—É—Å: {task[2]})\n"

    await message.answer(response)


@handlers_router.message(Command("edit"))
async def edit(message: Message):
    task_data = message.text[6:].strip()

    if ':' not in task_data:
        await message.answer("–§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ: –û–ø–∏—Å –∑–∞–¥–∞—á—ñ.")
        return

    task_title, new_task_description = task_data.split(':', 1)
    task_title = task_title.strip()
    new_task_description = new_task_description.strip()


    update_task_status(task_title, new_task_description)

    await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_title}' –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_task_description}")


@handlers_router.message(Command("delete"))
async def delete(message: Message):
    task_data = message.text[8:].strip()

    if ':' not in task_data:
        await message.answer("–§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ: –û–ø–∏—Å –∑–∞–¥–∞—á—ñ.")
        return

    task_title = task_data.split(':', 1)[0].strip()


    delete_task(task_title)

    await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_title}' –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!")


@handlers_router.message(Command("mark"))
async def mark_task(message: Message):
    command_data = message.text[6:].strip()

    if ' ' not in command_data:
        await message.answer("–§–æ—Ä–º–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: /mark <—Å—Ç–∞—Ç—É—Å> <–Ω–∞–∑–≤–∞_–∑–∞–¥–∞—á—ñ>")
        return

    status, task_title = command_data.split(' ', 1)
    task_title = task_title.strip()

    if status not in ["–≤–∏–∫–æ–Ω–∞–Ω–æ", "–≤ –ø—Ä–æ—Ü–µ—Å—ñ", "–ø—ñ–∑–Ω—ñ—à–µ"]:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å! –î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏: '–≤–∏–∫–æ–Ω–∞–Ω–æ', '–≤ –ø—Ä–æ—Ü–µ—Å—ñ', '–ø—ñ–∑–Ω—ñ—à–µ'.")
        return


    update_task_status(task_title, status)

    await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ '{task_title}' –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{status}'!")









